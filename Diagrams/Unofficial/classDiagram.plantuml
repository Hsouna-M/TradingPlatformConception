@startuml TradingPlatform

class User {
  +int id
  +String username
  +String email
  +String password
  +Boolean isVerified
  +login()
  +logout()
  +updateProfile()
}

class Trader {
  +createOrder()
  +modifyOrder()
  +cancelOrder() 
  +modifyAlert() 
  +createAlert()
  +requestSupport()
  +deposit()
  +withdraw()
}

class Admin {
  +addMarket()
  +removeMarket()
  +handleSupportTickets()
  +verifyUserIdentity()
  +blockUser()
}

class Order {
  +int id
  +int traderId
  +String marketPair
  +OrderType type
  +OrderStatus status
  +double amount
  +double price
  +Date createdAt
  +Date executedAt
  +process()
  +verify()
  +cancel()
  +modify()
}

class OrderBook{
  +Order[] Orders
  +pairOrders()
}


class Market {
  +String pair
  +double currentPrice
  +double volume24h
  +getMarketData()
  +updatePrice()
}

class Chart {
  +String marketPair
  +TimeFrame timeFrame
  +Date startTime
  +Date endTime
  +fetchData()
  +renderChart()
}



class Wallet {
  +int id
  +int userId
  +Map<string, double> Coins
  +getBalance()
  +updateBalance()
}

class Transaction {
+int id
+int walletId
+TransactionType type
+double amount
+String currency
+TransactionStatus status
+Date createdAt
+process()
+verify()
}



class Alert {
+int id
+int traderId
+String marketPair
+double targetPrice
+AlertType type
+boolean isActive
+Date createdAt
+Date triggeredAt
+checkCondition()
+trigger()
+deactivate()
}




class BlockchainNetwork {
+String name
+processCryptoTransaction()
+verifyTransaction()
}

class PaymentGateway {
+String name
+processFiatTransaction()
+verifyFiatPayment()
}

class TradingViewAPI {
+fetchMarketData()
+fetchHistoricalData()
}

class SupportTicket {
+int id
+int userId
+String subject
+String description
+TicketStatus status
+Date createdAt
+Date resolvedAt
+createResponse()
+closeTicket()
}


User <|-- Trader
User <|-- Admin
Trader "1..*" -- "1..1" Order : Passer 
Trader "1..*" -- "1..1" Alert : créer
Trader "1" -- "1" Wallet : have
Trader "1..*" -- "1..1" SupportTicket : créer
Admin "1..*" -- "1..1" SupportTicket : Traiter
Order "1..1" -- "1..*" Market : belong
Market "1..*" -- "1..1" Chart : have 
Market "1" -- "1" OrderBook : have 
Wallet "1..*" -- "1..1" Transaction : record 
Alert "1..1" -- "1..*" Market : belong 
Transaction ..> BlockchainNetwork : process 
Transaction ..> PaymentGateway : process 
Chart "1..1"-- "1..*" TradingViewAPI : load 

@enduml